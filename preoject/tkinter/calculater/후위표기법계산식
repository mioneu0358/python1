#연산자가 중간에 있을 경우 infix(중위표기법)

#연산자 우선순위를 판별하기 위한 클래스
class Operater:
    #생성자
    def __init__(self, op: str):
        self.op = op
        if op not in ('+','-','*','/'):
            raise ValueError("사용가능한 연사자가 아닙니다.")

    #매직 메소드(magic methods): +,-,>,<,등의 기본 연산자 밑 내장함수의 기능에 대하여
    # 오버라이딩을 가능하게 해주는 메소드

    #other와 같음(equal, ==)
    def __eq__(self, other):
        if type(other) != Operater:
            raise TypeError(f'{type(other)}타입과의 비교는 지원하지 않습니다.')

        if self.op in('+','-') and other.op in ('+','-'):
            return True
        elif self.op in('*','/') and other.op in ('*','/'):
            return True
        else:
            return False

    #other 보다 작음(less than, <)
    def __lt__(self, other):
        if type(other) != Operater:
            raise TypeError(f'{type(other)}타입과의 비교는 지원하지 않습니다.')

        return self.op in ('+','-') and other.op in ('*','/')

    #other 보다 작거나 같음( less than ~ or equal <=)
    def __le__(self,other):
        if type(other) != Operater:
            raise TypeError(f'{type(other)}타입과의 비교는 지원하지 않습니다.')
        return self.__eq__(other) or self.__lt__(other)
    #other 보다 큼(greater than,>)
    def __gt__(self, other):
        if type(other) != Operater:
            raise TypeError(f'{type(other)}타입과의 비교는 지원하지 않습니다.')
        return not self.__le__(other)

    #other보다 크거나 같음(Grater than ~ or equal,>=)
    def __ge__(self, other):
        if type(other) != Operater:
            raise TypeError(f'{type(other)}타입과의 비교는 지원하지 않습니다.')

        return not self.__lt__(other)

    #클래스의 정보를 표현함(represent)
    def __repr__(self):
        return f'Operator({self.op})'

    def operation(self, x, y):
        if self.op == '+':
            return x + y
        elif self.op == '-':
            return x- y
        elif self.op == '*':
            return x * y
        elif self.op == '/':
            return x / y

#정수 타입 계산기
class IntCalc:
    #생성자
    def __init__(self):
        self.infix_expr = []

    def set_expression(self, expr : str):
        self.infix_expr.clear() #기존 리스트 초기화
        operand = ''    #피연산자
        for x in expr:
            if x.isdigit(): #현재 수식이 숫자인 경우
                operand += x
            else:           #현재 수식이 연산자인 경우
                if len(operand) > 0:
                    self.infix_expr.append(int(operand))
                    operand = ''
                self.infix_expr.append(Operater(x))

        if len(operand) > 0:        #마지막에 들어간 수를 넣어준 적이 없으니 추가해준다.
                self.infix_expr.append(int(operand))
        print('수식을 리스트로:', self.infix_expr)

    #infix_expr(중위표현식)을 prefix_expr(후위 표현식)으로 반환하는 함수
    #1.숫자는 그대로 출력한다 == prefix_expr에 붙인다는 뜻
    #2.연산자는 스텍에 넣는다
        #2-1 스택이 비어있는 경우는 무조건 넣는다.
        #2-2 스택이 비어있지 않는 경우는 넣으려는 연산자와 스택에 있는 연산자를 비교하여
        #   스택에 있는 연산자의 우선순위가 넣으려는 운선순위보다 작을때 까지
        #   스텍에서 Pop하면서 출력하고 넣으려는 연산자를 스텍에 넣어준다.
    #3. 마지막으로 남아있는 스텍에 모든 연산자를 출력한다.(prefix_expr에 붙인다)
    def infix_to_prefix(self):
        prefix_expr = []
        stack = []
        #TODO: 기능 작성
        for i in self.infix_expr:
            #i가 숫자라면 그대로 prefix_expr에 붙인다
            if type(i) == int:
                prefix_expr.append(i)
            #i가 숫자가 아니라면(== 연산자라면) 위의 규칙에 따라 넣는다.
            else:
                while len(stack) > 0 and stack[-1] > i:
                    prefix_expr.append(stack.pop())
                stack.append(i)
        #스텍에 남아있는 연산자를 모두 prefix_expr에 넣는다
        while stack:
            prefix_expr.append(stack.pop())

        return prefix_expr


    #수식을 평가(계산)하는 함수
    def evaluation(self):
        stack = []
        prefix = self.infix_to_prefix()
        for i in prefix:
            if type(i) == int:
                stack.append(i)
            else:
                num2 = stack.pop()
                num1 = stack.pop()
                stack.append(i.operation(num1,num2))
        if len(stack) > 1:
            raise ValueError("잘못된 수식을 계산하려고 했습니다.")
        else:
            return stack.pop()

cal1 = IntCalc()
cal1.set_expression('12*20-3+4')
cal1.infix_to_prefix()
print(cal1.evaluation())

