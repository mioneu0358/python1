# 재귀 함수 (recursive function)
# 함수가 함수 내부에서 자기 자신을 호출하는 것
#   피보나치 수열
#   a0=1, a1=1, a2=2, a3=3, a4=5
#   [1, 1, 2, 3, 5, 8, 13, ...]
#   a(n) = a(n-1) + a(n-2)
def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n-1) + fibonacci(n-2)

# 고차 함수
# 파이썬의 함수는 객체다.
# 파이썬의 함수는 매개변수로 넘겨줄 수 있고, 함수 내에서 반환할 수 있다.
# 파이썬의 객체는 일급 객체, 그러므로 함수는 '일급 함수'라고 한다.
def multiplier(n):
    def multi(x):
        return x * n
    return multi

# 콜백 함수
# 함수의 입력으로 들어가는 함수 객체를 콜백 함수라고 한다.
def callback():
    print("작업이 끝났습니다.")

def print_n(n, cb):
    for i in range(1, n + 1):
        print(i)
    cb()

# 합성 함수
# f(x), g(x)의 합성 함수는 f(g(x))
# f(x) = x * x
# g(x) = x + 1
# f(g(x)) = (x + 1) * (x + 1)
def f(func):
    def result(x):
        return func(x) * func(x)
    return result

def g(x):
    return x + 1

h = f(g)

# 가비지 컬렉션 (garbage collection)
# 더 이상 참조되지 않는 객체(변수)를 파이썬의 가비지 컬렉터가 확인 후 메모리에서 삭제한다.

# 클로저 (closure)
# 함수가 종료되었음에도 불구하고, 함수의 지역 변수를 참조하는
# 다른 객체가 존재하는 경우 그 지역 변수는 메모리에서 사라지지 않는다.
# 이를 클로저라고 한다.
"""
count = 0
def func():
    global count
    count += 1
    print(count, "번 호출되었습니다")
func()
func()
func()
"""
def factory():
    count = {'c': 0}
    def func():
        count['c'] += 1
        print(count['c'], "번 호출되었습니다")
    return func

# 메모이제이션 (Memoization)
# 이전에 도출한 결과를 기억하고 다음에 똑같은 입력이 들어오면
# 새로 계산하는것이 아닌 기억된 값을 돌려주는 기법
cache = {}
def fib(n):
    if n < 2:
        return 1
    if n not in cache.keys():
        cache[n] = fib(n - 1) + fib(n - 2)
    return cache[n]

# 문제) 일반 재귀함수를 메모이제이션 함수로 만들어서 반환하는
# 팩토리 함수를 작성해보세요.
def to_memoization(func):
    cache = {}
    def result(n):
        if n not in cache.keys():
            cache[n] = func(n)
        return cache[n]
    return result


'''# 세 종류의 값을 저장하는 클래스
class Value3:
    def __init__(self, v1, v2, v3):
        self.v1 = v1
        self.v2 = v2
        self.v3 = v3

    def __iter__(self):
        def gen_iter():
            yield self.v1
            yield self.v2
            yield self.v3
        return gen_iter()


value3 = Value3("문자열", 1000, ("튜플", 1))

# 1. in 오른쪽 객체에 대한 iter 메서드 호출
# 2. iterator 객체에서 next 메서드 호출
# 3. 2번을 StopIteration 예외 발생 까지 반복
for i in value3:
    print(i)

'''

# 연산자 오버라이딩(Operator overriding, 연산자 재정의)
class Person:
    def __init__(self, name):
        self.name = name

    def print_name(self):
        print(self.name)

    def __add__(self, other):
        new = Marriage(self, other)
        return new

class Marriage:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def print_familly(self):
        print("[가족 구성]")
        self.x.print_name()
        self.y.print_name()

a = Person("철수")
b = Person("영희")
# a + b -> a.__add__(b)
m = a + b
m.print_familly()






















