class Centrifuge:
    # n: 구멍 수, data: 원심분리기 구멍 중 시험관이 채워진 구멍을 나타내는 구성
    def __init__(self,n,data):
        self.n = n
        self.test_tube = sorted(data)
        pass

    def __repr__(self):
        return f"Centrifuge({self.n}, {self.test_tube})"

    def rotate(self,clockwise=False):
        print(f"rotate: {self.test_tube} => ", end='')
        if clockwise:
            for i in range(len(self.test_tube)):
                self.test_tube[i] -= 1
                if self.test_tube[i] < 0:
                    self.test_tube[i] = self.n-1
        else:
            for i in range(len(self.test_tube)):
                self.test_tube[i] += 1
                if self.test_tube[i] == self.n:
                    self.test_tube[i] = 0
        self.test_tube.sort()
        print(self.test_tube)
        return self

    def mirror(self):
        print(f"mirror: {self.test_tube} => ",end ='')
        for i in range(len(self.test_tube)):
            if self.test_tube[i] == 0: continue
            self.test_tube[i] = abs(self.n - self.test_tube[i])
        self.test_tube.sort()
        print(self.test_tube)
        return self
    def __eq__(self, other):
        if self.n != other.n: return False
        flag = False
        for i in range(self.n):
            self.rotate()
            if self.test_tube == other.test_tube:
                flag = True
        return flag


    def __iadd__(self, other):
        pass
    def __isub__(self, other):
        pass
if __name__ == "__main__":
    # centrifuge = Centrifuge(6, {4, 1, 3, 0})
    # print(centrifuge)
    # # Centrifuge(6, [0, 1, 3, 4])
    # print(centrifuge.rotate())
    # # Centrifuge(6, [1, 2, 4, 5])
    # print(centrifuge.rotate(clockwise=True))
    # # Centrifuge(6, [0, 1, 3, 4])
    # print(centrifuge.mirror())
    # # Centrifuge(6, [0, 2, 3, 5])
    # print(centrifuge.mirror())
    # # Centrifuge(6, [0, 1, 3, 4])

    centrifuge = Centrifuge(6, [2, 0, 5])
    print(centrifuge == Centrifuge(6, [2, 3, 5]))
    # True
    print(centrifuge == Centrifuge(6, [3, 4, 5]))
    # False
    print(centrifuge)
    # Centrifuge(6, [0, 2, 5])
    print(centrifuge.rotate().rotate().mirror())
    # Centrifuge(6, [2, 4, 5])
    print(centrifuge.mirror().rotate(True).rotate(True))
    # # Centrifuge(6, [0, 2, 5])
    #
    # Centrifuge(6, [0, 1, 2, 4, 5])
    # >> > centrifuge += Centrifuge(6, [1, 4, 2])
    # Traceback(most recent call last):
    # AssertionError: could not fill holes
    # >> > centrifuge -= Centrifuge(6, {1, 4})
    # >> > centrifuge
    # Centrifuge(6, [0, 2, 5])
    # >> > centrifuge -= Centrifuge(6, (1, 5))
    # Traceback(most
    # recent
    # call
    # last):
    # AssertionError: could
    # not empty
    # holes
