#이진트리(binary tree)
class Tree_Node:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right

class Binary_Tree:
    def __init__(self):
        self.root = None
        
        
    def insert(self,data):
        node = Tree_Node(data,None, None)
        if self.root == None:
            self.root = node
            return 
        else:
            curr = self.root
            while True:
                if curr.data < node.data:
                    if curr.right == None:
                        curr.right = node
                        return
                    curr = curr.right
                elif curr.data > node.data:
                    if curr.left == None:
                        curr.left = node
                        return
                    curr = curr.left

    def delete(self,data):
        curr = self.root
        pcurr = None
        while True:
            if curr.data == data:
                #1. 자식 노드가 한개도 없을때
                if curr.left == None and curr.right == None:
                    if pcurr.left == curr:
                        pcurr.left = None
                    elif pcurr.right == curr:
                        pcurr.right = None
                        
                #2. 자식 노드가 한 개 있을때 
                #2-1curr의 오른쪽 노드만 있을때                        
                elif curr.left == None and curr.right != None:
                    if pcurr.left == curr:
                        pcurr.left = curr.right
                    elif pcurr.right == curr:
                        pcurr.right == curr.right
                #2-2  curr의 왼쪽 노드만 있을때
                elif curr.left != None and curr.right == None:
                    if pcurr.left == curr:
                        pcurr.left =  curr.left
                    elif pcurr.right == curr:
                        pcurr.right = curr.left


            elif curr.data < data:
                pcurr = curr
                curr= curr.right

            elif curr.data > data:
                pcurr = curr
                curr = curr.left
        return None



    def preorder(self):
        pass
    def inorder(self):
        pass
    def postorder(self):
        pass

