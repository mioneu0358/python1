class Node:
    def __init__(self,data):
        self.data = data            #노드엔 자신의 데이터와 왼쪽 오른쪽의 자식트리를 가질 링크가 있다.
        self.left = None
        self.right = None


class BinaryTree():
    def __init__(self):
        self.root = None        

    def insert(self,data):      #삽입
        n = Node(data)              #n은 새로운 노드
        if self.root is None:       #루트가 비어있으면 n이 루트가 된다
            self.root = n
            return

        current = self.root         #루트를 현위치로 바인딩하고

        while True:
            parent = current        #현위치를 부모로 바인딩한뒤
            if data < current.data: #새로운 데이터 값이 현위치의 값보다 작으면
                current = current.left  #현위치의 좌측 자식 노드가 현위치가 되고
                if current is None:     #바뀐 현위치가 비어있으면
                    parent.left = n     #새로운 노드는 부모 노드의 왼쪽에 링크시켜준다
                    break
            else:
                current = current.right     #반대의 경우 현위치를 현위치의 우측 자식 노드로 바꾸고
                if current is None:         #현위치가 비어있으면 새로운 노드는 부모노드의 오른쪽에 링크
                    parent.right = n        
                    break
    

    def get_min(self):
        current = self.root
        while current.left is not None:
            current = current.left
        return current
    
    def get_max(self):
        current = self.root
        while current.right is not None:
            current = current.right
        return current



    def find(self,data):
        current = self.root               #루트를 현재로 놓고
        while True:
            if current is None:           #현재가 비어있을땐   None
                return None 
            if current.data > data:       #찾는 데이터가 현재 데이터 보다 작으면 왼쪽 자식트리로
                current = current.left
            elif current.data < data:     #찾는 데이터가 현재 데이터 보다 크면 오른쪽 자식트리로
                current = current.right
            else:
                return current


    def preorder(self,node):        #전위순환 = 자신, 왼쪽, 오른쪽
        if node is not None:                #노드가 비어있지 않으면
            print(node.data, end = '')      #노드의 데이터를 출력하고
            self.preorder(node.left)        #노드의 왼쪽 
            self.preorder(node.right)       #노드의 오른쪽 순으로 출발한다


    def inorder(self,node):         #중위순환 = 왼쪽, 자신, 오른쪽
        if node is not None:
            self.inorder(node.left)
            print(node.data,end= '')
            self.inorder(node.right)

    def postorder(self,node):       #후위순환 = 왼쪽, 오른쪽, 자신
        if node is not None:
            self.postorder(node.left)
            self.postorder(node.right)
            print(node.data, end = '')

    def delete_node(self,current,item):
        if current is None:
            return None
        if current.data > data:
            current.left = self.delete_node(current.left, data)
            return current
        elif currnt.data < data:
            current.right = self.delete_node(current.right, data)
            return current
        else:
